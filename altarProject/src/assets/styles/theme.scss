@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();



// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue.
$live-primary: mat-palette($mat-light-blue,600,400,A700);
$live-accent:  mat-palette($mat-amber,600,A100,A700);
$live-warn:    mat-palette($mat-red,600);

$grey-primary: mat-palette($mat-grey,400,600,800);

// Create the theme object (a Sass map containing all of the palettes).
$live-theme: mat-light-theme($live-primary, $live-accent, $live-warn);
$grey-theme: mat-dark-theme($grey-primary, $live-accent, $live-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($live-theme);
@include angular-material-theme($grey-theme);

// Include the alternative theme styles inside of a block with a CSS class. You can make this
// CSS class whatever you want. In this example, any component inside of an element with
// `.unicorn-dark-theme` will be affected by this alternate dark theme instead of the default theme.
.nbfs-dark-theme {
  @include angular-material-theme($grey-theme);
}
.live-light-theme {
  @include angular-material-theme($live-theme);
}

// .nbfs-dark-theme .mat-menu-panel {
//   background: #455A64 !important;
// }
